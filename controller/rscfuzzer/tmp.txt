int uname(struct utsname *buf);
int flock(int fd, int operation);
int fsync(int fd);
int fdatasync(int fd);
int truncate(const char *path, off_t length);
int ftruncate(int fd, off_t length);
int getdents(unsigned int fd, struct linux_dirent *dirp,unsigned int count);
char *getcwd(char *buf, size_t size);
int chdir(const char *path);
int fchdir(int fd);
int rename(const char *oldpath, const char *newpath);
int mkdir(const char *pathname, mode_t mode);
int rmdir(const char *path);
int creat(const char *pathname, mode_t mode);
int link(const char *oldpath, const char *newpath);
int unlink(const char *pathname);
int symlink(const char *path1, const char *path2);
ssize_t readlink(const char *path, char *buf, size_t bufsiz);
int chmod(const char *pathname, mode_t mode);
int fchmod(int fd, mode_t mode);
int chown(const char *pathname, uid_t owner, gid_t group);
int fchown(int fd, uid_t owner, gid_t group);
int lchown(const char *pathname, uid_t owner, gid_t group);
int gettimeofday(struct timeval *tv, struct timezone *tz);
int getrlimit(int resource, struct rlimit *rlim);
int getrusage(int who, struct rusage *usage);
int sysinfo(struct sysinfo *info);
clock_t times(struct tms *buf);
uid_t getuid(void);
gid_t getgid(void);
int setuid(uid_t uid);
int setgid(gid_t gid);
uid_t geteuid(void);
gid_t getegid(void);
int setpgid(pid_t pid, pid_t pgid);
pid_t getppid(void);
pid_t getpgrp(void);
pid_t setsid(void);
int setreuid(uid_t ruid, uid_t euid);
int setregid(gid_t rgid, gid_t egid);
int getgroups(int size, gid_t list[]);
int setgroups(size_t size, const gid_t *list);
int setresuid(uid_t ruid, uid_t euid, uid_t suid);
int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
int setresgid(gid_t rgid, gid_t egid, gid_t sgid);
int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
pid_t getpgid(pid_t pid);
pid_t getsid(pid_t pid);
int utime(const char *filename, const struct utimbuf *times);
int mknod(const char *pathname, mode_t mode, dev_t dev);
int statfs(const char *path, struct statfs *buf);
int fstatfs(int fd, struct statfs *buf);
int sysfs(int option, unsigned int fs_index, char *buf); int sysfs(int option, const char *fsname); int sysfs(int option);
int setpriority(int which, id_t who, int prio);
int sched_setparam(pid_t pid, const struct sched_param *param);
int sched_setscheduler(pid_t pid, int policy,const struct sched_param *param);
int mlock(const void *addr, size_t len);
int munlock(const void *addr, size_t len);
int mlockall(int flags);
int munlockall(void);
int vhangup(void);
int pivot_root(const char *new_root, const char *put_old);
int setrlimit(int resource, const struct rlimit *rlim);
int chroot(const char *path);
void sync(void);
int acct(const char *filename);
int settimeofday(const struct timeval *tv, const struct timezone *tz);
int mount(const char *source, const char *target,const char *filesystemtype, unsigned long mountflags,const void *data);
int umount2(const char *target, int flags);
int swapon(const char *path, int swapflags);
int swapoff(const char *path);
int sethostname(const char *name, size_t len);
int setdomainname(const char *name, size_t len);
int iopl(int level);
int ioperm(unsigned long from, unsigned long num, int turn_on);
pid_t gettid(void);
ssize_t readahead(int fd, off64_t offset, size_t count);
int setxattr(const char *path, const char *name,const void *value, size_t size, int flags);
int lsetxattr(const char *path, const char *name,const void *value, size_t size, int flags);
int fsetxattr(int fd, const char *name,const void *value, size_t size, int flags);
ssize_t getxattr(const char *path, const char *name,void *value, size_t size);
ssize_t lgetxattr(const char *path, const char *name,void *value, size_t size);
ssize_t fgetxattr(int fd, const char *name,void *value, size_t size);
ssize_t listxattr(const char *path, char *list, size_t size);
ssize_t llistxattr(const char *path, char *list, size_t size);
ssize_t flistxattr(int fd, char *list, size_t size);
int removexattr(const char *path, const char *name);
int lremovexattr(const char *path, const char *name);
int fremovexattr(int fd, const char *name);
time_t time(time_t *tloc);
int sched_setaffinity(pid_t pid, size_t cpusetsize,cpu_set_t *mask);
int epoll_create(int size);
int getdents(unsigned int fd, struct linux_dirent *dirp,unsigned int count);
int posix_fadvise(int fd, off_t offset, off_t len, int advice);
int timer_delete(timer_t timerid);
int clock_settime(clockid_t clk_id, const struct timespec *tp);
int clock_gettime(clockid_t clk_id, struct timespec *tp);
int clock_getres(clockid_t clk_id, struct timespec *res);
int clock_nanosleep(clockid_t clock_id, int flags,const struct timespec *request,struct timespec *remain);
void exit_group(int status);
int epoll_wait(int epfd, struct epoll_event *events,int maxevents, int timeout);
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
int tgkill(int tgid, int tid, int sig);
int utimes(const char *filename, const struct timeval times[2]);
int mq_unlink(const char *name);
int mq_timedsend(mqd_t mqdes, const char *msg_ptr,size_t msg_len, unsigned msg_prio,const struct timespec *abs_timeout);
ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr,size_t msg_len, unsigned *msg_prio,const struct timespec *abs_timeout);
int mq_notify(mqd_t mqdes, const struct sigevent *sevp);
int mq_getsetattr(mqd_t mqdes, struct mq_attr *newattr,struct mq_attr *oldattr);
int inotify_init(void);
int inotify_add_watch(int fd, const char *pathname, uint32_t mask);
int inotify_rm_watch(int fd, int wd);
int openat(int dirfd, const char *pathname, int flags, mode_t mode);
int mkdirat(int dirfd, const char *pathname, mode_t mode);
int mknodat(int dirfd, const char *pathname, mode_t mode, dev_t dev);
int fchownat(int dirfd, const char *pathname,uid_t owner, gid_t group, int flags);
int futimesat(int dirfd, const char *pathname,const struct timeval times[2]);
int fstatat(int dirfd, const char *pathname, struct stat *statbuf,int flags);
int unlinkat(int dirfd, const char *pathname, int flags);
int renameat(int olddirfd, const char *oldpath,int newdirfd, const char *newpath);
int linkat(int olddirfd, const char *oldpath,int newdirfd, const char *newpath, int flags);
int symlinkat(const char *oldpath, int newdirfd, const char *newpath);
int readlinkat(int dirfd, const char *pathname,char *buf, size_t bufsiz);
int fchmodat(int dirfd, const char *pathname, mode_t mode, int flags);
int faccessat(int dirfd, const char *pathname, int mode, int flags);
int pselect(int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, const struct timespec *timeout,const sigset_t *sigmask);
int ppoll(struct pollfd *fds, nfds_t nfds,const struct timespec *tmo_p, const sigset_t *sigmask);
ssize_t splice(int fd_in, loff_t *off_in, int fd_out,loff_t *off_out, size_t len, unsigned int flags);
ssize_t tee(int fd_in, int fd_out, size_t len, unsigned int flags);
int sync_file_range(int fd, off64_t offset, off64_t nbytes,unsigned int flags);
ssize_t vmsplice(int fd, const struct iovec *iov,unsigned long nr_segs, unsigned int flags);
int utimensat(int dirfd, const char *pathname,const struct timespec times[2], int flags);
int epoll_pwait(int epfd, struct epoll_event *events,int maxevents, int timeout,const sigset_t *sigmask);
int timerfd_create(int clockid, int flags);
int eventfd(unsigned int initval, int flags);
int fallocate(int fd, int mode, off_t offset, off_t len);
int timerfd_settime(int fd, int flags,const struct itimerspec *new_value,struct itimerspec *old_value);
int timerfd_gettime(int fd, struct itimerspec *curr_value);
int accept4(int s, struct sockaddr * restrict addr,socklen_t * restrict addrlen, int flags);
int eventfd(unsigned int initval, int flags);
int epoll_create1(int flags);
int dup3(int oldfd, int newfd, int flags);
int pipe2(int pipefd[2], int flags);
int inotify_init1(int flags);
ssize_t preadv(int fd, const struct iovec *iov, int iovcnt,off_t offset);
ssize_t pwritev(int fd, const struct iovec *iov, int iovcnt,off_t offset);
int recvmmsg(int sockfd, struct mmsghdr *msgvec, unsigned int vlen,int flags, struct timespec *timeout);
int fanotify_init(unsigned int flags, unsigned int event_f_flags);
int fanotify_mark(int fanotify_fd, unsigned int flags,uint64_t mask, int dirfd, const char *pathname);
int prlimit(pid_t pid, int resource, const struct rlimit *new_limit,struct rlimit *old_limit);
int name_to_handle_at(int dirfd, const char *pathname,struct file_handle *handle,int *mount_id, int flags);
int open_by_handle_at(int mount_fd, struct file_handle *handle,int flags);
int clock_adjtime(clockid_t id, struct timex *tx)
int syncfs(int fd);
int sendmmsg(int sockfd, struct mmsghdr *msgvec, unsigned int vlen,int flags);
int setns(int fd, int nstype);